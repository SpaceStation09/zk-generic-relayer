// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import {Test} from "forge-std/Test.sol";
import "../src/SignatureVerifier.sol";
import "../src/lib/P256.sol";
import "../src/lib/P256Verifier.sol";

contract sigVerifyTest is Test {
    SignatureVerifier verifier;
    uint[2] pubkey;

    function setUp() public {
        string
            memory xStr = "0xdc8ade99e62b6e35579e76890be04cbc77bad16121e633a4b6bb8c4e1cc0ea5d";
        string
            memory yStr = "0xe4a10db77ec6c207465e01d4b5aa771d5538425d7e20aa9fd36c146e49e05570";
        uint x = vm.parseUint(xStr);
        uint y = vm.parseUint(yStr);
        pubkey = [x, y];
        vm.etch(P256.VERIFIER, type(P256Verifier).runtimeCode);
        verifier = new SignatureVerifier(pubkey);
    }

    function testVerifier() public {
        address testAddress = 0x7E5703DdAae595C2f2Cc8c46Da49F2966095ac23;
        string
            memory sigAsString = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001b86affca8ff8d72c0fcfd3c4beb2f29c5aa867b151b570e7fade2b26b0cb316ce62dccc523e2b7e3a3741e511d9a325b0f65ddd5d5d4f2685854ae0e4078d993000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000767b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22666c63443361726c6c634c797a497847326b6e796c6d435672434d222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c73657d00000000000000000000";
        bytes memory signature = vm.parseBytes(sigAsString);
        bytes memory message = abi.encodePacked(testAddress);
        bool ret = verifier.verifySig(signature, message);
        assertEq(ret, true);
    }

    function testVerifyCall() public {
        address dest = 0x7E5703DdAae595C2f2Cc8c46Da49F2966095ac23;
        uint value = 0;
        //"transfer(address,uint256)" "0x8cAb42EF3c96Ca59f5C52E687197d9e54161831A" $(cast to-wei 1)
        string
            memory opCalldataAsStr = "0xa9059cbb0000000000000000000000008cab42ef3c96ca59f5c52e687197d9e54161831a0000000000000000000000000000000000000000000000000de0b6b3a7640000";
        bytes memory opCalldata = vm.parseBytes(opCalldataAsStr);
        Call memory call = Call(dest, value, opCalldata);
        string
            memory sigAsString = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000016107671cdbe494edf59620792b086e85e9a7ab42bc475a5aeaf9d9c84425e9a683a730bea2a1f8914a5507683210e99650c369256e527c776d5deaad8d4a5533000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22666c63443361726c6c634c797a497847326b6e796c6d435672434d4141414141414141414141414141414141414141414141414141414141414141414141414141414141414b6b466e4c73414141414141414141414141414141434d71304c76504a624b576658464c6d68786c396e6c5157474447674141414141414141414141414141414141414141414141414141414141414141336774724f6e5a414141222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c73657d0000000000";
        bytes memory signature = vm.parseBytes(sigAsString);
        bool ret = verifier.verifyCall(call, signature);
        assertEq(ret, true);
    }
}
